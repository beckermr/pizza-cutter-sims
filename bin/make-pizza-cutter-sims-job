#!/usr/bin/env python
import os
import click
import numpy as np

LCRC_TEMPLATE = """\
#!/bin/bash

#SBATCH --job-name={job_name}
#SBATCH --account=metashear
#SBATCH --partition=bdwall
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=1
#SBATCH --exclusive
#SBATCH --output=log_{job_name}_lcrc%j.oe
#SBATCH --time={hours}:00:00

source ~/.bashrc
conda activate pizza-cutter-sims

srun run-pizza-cutter-sims \\
    --config={config} \\
    --seed={seed} \\
    --n-sims={n_sims} \\
    --backend=loky \\
    --output=data_{job_name}.fits \\
    --n-pack={n_pack}
"""


BASH_TEMPLATE = """\
#!/bin/bash

run-pizza-cutter-sims \\
    --config={config} \\
    --seed={seed} \\
    --n-sims={n_sims} \\
    --backend=loky \\
    --output=data_{job_name}.fits \\
    --n-pack={n_pack} \\
    &> log_{job_name}.oe
"""

BNL_TEMPLATE = """\
#!/bin/bash

run-pizza-cutter-sims \\
    --config={config} \\
    --seed={seed} \\
    --n-sims={n_sims} \\
    --backend=condor \\
    --output=data_{job_name}.fits \\
    --n-pack={n_pack} \\
    &> log_{job_name}.oe
"""


SLAC_TEMPLATE = """\
#!/bin/bash

run-pizza-cutter-sims \\
    --config={config} \\
    --seed={seed} \\
    --n-sims={n_sims} \\
    --backend=lsf \\
    --output=data_{job_name}.fits \\
    --n-pack={n_pack} \\
    &> log_{job_name}.oe
"""


@click.command()
@click.option('--config', type=str, default="config.yaml", help='config file')
@click.option('--seed', type=int, default=None, help='seed for the RNG')
@click.option('--n-sims', type=int, default=None, help='number of sims to run')
@click.option('--system', type=str, default="lcrc", help='system to run on')
@click.option('--hours', type=str, default=None, help='amount of time to run')
@click.option(
    '--n-jobs', type=int, default=None,
    help=(
        'number of jobs to run for job arrays - '
        'this will run a total of n_sims * n_jobs sims'
    )
)
def main(config, seed, n_sims, system, hours, n_jobs):
    """Run simulation(s) and analyze them with pizza cutter coadding and metadetect."""
    if seed is None:
        seed = np.random.randint(low=1, high=2**30)

    if system == "lcrc":
        hours = hours or "12"
        n_sims = n_sims or 100_000
        ext = ".sh"
        n_pack = min(n_sims, 100)
    elif system == "bash":
        n_sims = n_sims or 1
        ext = ".sh"
        n_pack = min(n_sims, 100)
    elif system == "bnl":
        n_sims = n_sims or 100_000
        ext = ".sh"
        n_pack = min(n_sims, 100)
    elif system == "slac":
        n_sims = n_sims or 100_000
        ext = ".sh"
        n_pack = min(n_sims, 100)
    else:
        raise RuntimeError("system '%s' not recognized" % system)

    if os.path.basename(config) == "config.yaml":
        job_name = os.path.abspath(config).split("/")[-2]
    else:
        job_name = os.path.basename(config).replace(".yaml", "")

    job_name += "_nsims%d_seed%d" % (n_sims, seed)

    if system == "lcrc":
        cmd = LCRC_TEMPLATE.format(
            job_name=job_name,
            config=config,
            seed=seed,
            n_sims=n_sims,
            hours=hours,
            n_pack=n_pack,
        )
    elif system == "bash":
        cmd = BASH_TEMPLATE.format(
            job_name=job_name,
            config=config,
            seed=seed,
            n_sims=n_sims,
            n_pack=n_pack,
        )
    elif system == "bnl":
        cmd = BNL_TEMPLATE.format(
            job_name=job_name,
            config=config,
            seed=seed,
            n_sims=n_sims,
            n_pack=n_pack,
        )
    elif system == "slac":
        cmd = SLAC_TEMPLATE.format(
            job_name=job_name,
            config=config,
            seed=seed,
            n_sims=n_sims,
            n_pack=n_pack,
        )
    else:
        raise RuntimeError("system '%s' not recognized" % system)

    with open("./run_" + job_name + "_" + system + ext, "w") as fp:
        fp.write(cmd)

    print("run_" + job_name + "_" + system + ext)


if __name__ == '__main__':
    main()
