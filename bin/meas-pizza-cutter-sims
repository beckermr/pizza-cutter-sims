#!/usr/bin/env python
import click
import fitsio
import esutil
import yaml
import tqdm

from pizza_cutter_sims.run_utils import estimate_m_and_c


def _read_ext(files, ext):
    data = []
    for fname in tqdm.tqdm(files, desc='read ' + ext, leave=False):
        data.append(fitsio.read(fname, ext=ext))

    data = esutil.numpy_util.combine_arrlist(data)
    return data


@click.command()
@click.option('--config', type=str, default="config.yaml", help='config file')
@click.argument('files', nargs=-1)
@click.option(
    '--s2n-cuts', type=str, default='10',
    help='signal-to-noise cuts to use, comma separated',
)
@click.option(
    '--jackknife', type=int, default=None,
    help='number of jackknife subsets to use',
)
@click.option(
    '--ormask-cut', type=int, default=None,
    help='Cut to make on ormask. 0 indicates make a cut, 1 indicates no cut.',
)
@click.option(
    '--mfrac-cut', type=int, default=None,
    help=(
        'Cut to make on mfrac. Given in percentages.'
        ' Cut keeps all objects less than the given value.'
    ),
)
def main(config, files, s2n_cuts, jackknife, ormask_cut, mfrac_cut):
    """Measure shear from a set of pizza cutter sim FILES."""
    with open(config, "r") as fp:
        cfg = yaml.safe_load(fp.read())

    print("reading data", flush=True)
    pdata = _read_ext(files, "plus")
    mdata = _read_ext(files, "minus")
    print("done reading data", flush=True)

    for s2n_cut in [int(s) for s in s2n_cuts.split(",")]:
        print("cutting data", flush=True)
        pmsk = (pdata["s2n_cut"] == s2n_cut)
        if ormask_cut is not None:
            pmsk = pmsk & (pdata["ormask_cut"] == ormask_cut)
        else:
            pmsk = pmsk & (pdata["ormask_cut"] == -1)
        if mfrac_cut is not None:
            pmsk = pmsk & (pdata["mfrac_cut"] == mfrac_cut)
        else:
            pmsk = pmsk & (pdata["mfrac_cut"] == -1)
        print("done cutting data", flush=True)
        import numpy as np
        print(np.unique(pdata["ormask_cut"]), np.unique(pdata["mfrac_cut"]))
        m, msd, c, csd = estimate_m_and_c(
            pdata[pmsk],
            mdata[pmsk],
            cfg["shear"]["g"],
            swap12=cfg["shear"]["swap12"],
            jackknife=jackknife,
        )

        print("""\
# of sims: {n_sims}
cuts: s2n>={s2n_cut}, ormask: {ormask_cut}, mfrac: {mfrac_cut}
noise cancel m   : {m: f} +/- {msd: f} [1e-3, 3-sigma]
noise cancel c   : {c: f} +/- {csd: f} [1e-5, 3-sigma]""".format(
                n_sims=np.sum(pmsk),
                m=m/1e-3,
                msd=msd/1e-3 * 3,
                c=c/1e-5,
                csd=csd/1e-5 * 3,
                s2n_cut=s2n_cut,
                ormask_cut=ormask_cut,
                mfrac_cut=mfrac_cut,
            ),
            flush=True,
        )


if __name__ == '__main__':
    main()
