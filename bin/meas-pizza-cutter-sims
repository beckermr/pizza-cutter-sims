#!/usr/bin/env python
import click
import fitsio
import esutil
import yaml
import numpy as np

from pizza_cutter_sims.run_utils import estimate_m_and_c


def _read_ext(files, ext):
    data = []
    for fname in files:
        data.append(fitsio.read(fname, ext=ext))

    data = esutil.numpy_util.combine_arrlist(data)
    return data


@click.command()
@click.option('--config', type=str, default="config.yaml", help='config file')
@click.argument('files', nargs=-1)
@click.option(
    '--s2n-cuts', type=str, default='10',
    help='signal-to-noise cuts to use, comma separated',
)
@click.option(
    '--jackknife', type=int, default=None,
    help='number of jackknife subsets to use',
)
@click.option(
    '--keep-interp', is_flag=True,
    help='keep interpolated objects',
)
def main(config, files, s2n_cuts, jackknife, keep_interp):
    """Measure shear from a set of pizza cutter sim FILES."""
    with open(config, "r") as fp:
        cfg = yaml.safe_load(fp.read())

    pdata = _read_ext(files, "plus")
    mdata = _read_ext(files, "minus")

    for s2n_cut in [int(s) for s in s2n_cuts.split(",")]:
        if keep_interp:
            pmsk = (pdata["s2n_cut"] == s2n_cut) & (~pdata["cut_interp"])
            assert not np.any(pdata[pmsk]["cut_interp"])
        else:
            pmsk = (pdata["s2n_cut"] == s2n_cut) & (pdata["cut_interp"])
            assert np.all(pdata[pmsk]["cut_interp"])

        _mdata = mdata[pmsk]
        _pdata = pdata[pmsk]

        pres = [
            (
                _pdata["g1p"][i], _pdata["g1m"][i], _pdata["g1"][i],
                _pdata["g2p"][i], _pdata["g2m"][i], _pdata["g2"][i],
            )
            for i in range(pdata[pmsk].shape[0])
        ]

        mres = [
            (
                _mdata["g1p"][i], _mdata["g1m"][i], _mdata["g1"][i],
                _mdata["g2p"][i], _mdata["g2m"][i], _mdata["g2"][i],
            )
            for i in range(pdata[pmsk].shape[0])
        ]

        m, msd, c, csd = estimate_m_and_c(
            pres,
            mres,
            cfg["shear"]["g"],
            swap12=cfg["shear"]["swap12"],
            jackknife=jackknife,
        )

        print("""\
# of sims: {n_sims}
cuts: s2n>={s2n_cut} && cut_interp
noise cancel m   : {m: f} +/- {msd: f} [1e-3, 1-sigma]
noise cancel c   : {c: f} +/- {csd: f} [1e-5, 1-sigma]""".format(
                n_sims=len(pres),
                m=m/1e-3,
                msd=msd/1e-3,
                c=c/1e-5,
                csd=csd/1e-5,
                s2n_cut=s2n_cut,
            ),
            flush=True,
        )


if __name__ == '__main__':
    main()
